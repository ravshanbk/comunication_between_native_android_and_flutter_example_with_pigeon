// Autogenerated from Pigeon (v18.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "messages.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace pigeon_example {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

FlutterError CreateConnectionError(const std::string channel_name) {
    return FlutterError(
        "channel-error",
        "Unable to establish connection on channel: '" + channel_name + "'.",
        EncodableValue(""));
}

// Book

Book::Book() {}

Book::Book(
  const std::string* title,
  const std::string* image_url)
 : title_(title ? std::optional<std::string>(*title) : std::nullopt),
    image_url_(image_url ? std::optional<std::string>(*image_url) : std::nullopt) {}

const std::string* Book::title() const {
  return title_ ? &(*title_) : nullptr;
}

void Book::set_title(const std::string_view* value_arg) {
  title_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void Book::set_title(std::string_view value_arg) {
  title_ = value_arg;
}


const std::string* Book::image_url() const {
  return image_url_ ? &(*image_url_) : nullptr;
}

void Book::set_image_url(const std::string_view* value_arg) {
  image_url_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void Book::set_image_url(std::string_view value_arg) {
  image_url_ = value_arg;
}


EncodableList Book::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(title_ ? EncodableValue(*title_) : EncodableValue());
  list.push_back(image_url_ ? EncodableValue(*image_url_) : EncodableValue());
  return list;
}

Book Book::FromEncodableList(const EncodableList& list) {
  Book decoded;
  auto& encodable_title = list[0];
  if (!encodable_title.IsNull()) {
    decoded.set_title(std::get<std::string>(encodable_title));
  }
  auto& encodable_image_url = list[1];
  if (!encodable_image_url.IsNull()) {
    decoded.set_image_url(std::get<std::string>(encodable_image_url));
  }
  return decoded;
}


BookApiCodecSerializer::BookApiCodecSerializer() {}

EncodableValue BookApiCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(Book::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void BookApiCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(Book)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<Book>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by BookApi.
const flutter::StandardMessageCodec& BookApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&BookApiCodecSerializer::GetInstance());
}

// Sets up an instance of `BookApi` to handle messages through the `binary_messenger`.
void BookApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  BookApi* api) {
  BookApi::SetUp(binary_messenger, api, "");
}

void BookApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  BookApi* api,
  const std::string& message_channel_suffix) {
  const std::string prepended_suffix = message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "";
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.pigeon_example.BookApi.searchBook" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_key_word_arg = args.at(0);
          if (encodable_key_word_arg.IsNull()) {
            reply(WrapError("key_word_arg unexpectedly null."));
            return;
          }
          const auto& key_word_arg = std::get<std::string>(encodable_key_word_arg);
          ErrorOr<EncodableList> output = api->SearchBook(key_word_arg);
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
}

EncodableValue BookApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue BookApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace pigeon_example
